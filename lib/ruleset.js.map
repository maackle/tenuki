{"version":3,"sources":["../src/ruleset.js"],"names":[],"mappings":"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","file":"ruleset.js","sourcesContent":["const VALID_KO_OPTIONS = [\n  \"simple\",\n  \"positional-superko\",\n  \"situational-superko\",\n  \"natural-situational-superko\"\n];\n\nconst Ruleset = function({ koRule }) {\n  this.koRule = koRule;\n\n  if (VALID_KO_OPTIONS.indexOf(this.koRule) < 0) {\n    throw new Error(\"Unknown ko rule: \" + koRule);\n  }\n\n  Object.freeze(this);\n};\n\nRuleset.prototype = {\n  isIllegal: function(y, x, game) {\n    const boardState = game.currentState();\n    const intersection = boardState.intersectionAt(y, x);\n\n    const result = !intersection.isEmpty() ||\n      this._wouldBeSuicide(y, x, boardState) ||\n      this._isKoViolation(y, x, boardState, game._moves);\n\n    return result;\n  },\n\n  _isKoViolation: function(y, x, boardState, existingStates) {\n    let isKoViolation = false;\n\n    if (this.koRule === \"simple\") {\n      const simpleKoPoint = boardState._simpleKoPoint();\n      isKoViolation = Boolean(simpleKoPoint) && y === simpleKoPoint.y && x === simpleKoPoint.x;\n    } else {\n      const newState = boardState.playAt(y, x, boardState.nextColor());\n\n      const hasDuplicatePosition = (condition) => {\n        return existingStates.length > 0 && existingStates.some(existingState => {\n          return condition(existingState) && existingState.positionSameAs(newState);\n        });\n      };\n\n      if (this.koRule === \"positional-superko\") {\n        isKoViolation = hasDuplicatePosition(() => true);\n      } else if (this.koRule === \"situational-superko\") {\n        isKoViolation = hasDuplicatePosition((state) => {\n          return state.color === newState.color;\n        });\n      } else if (this.koRule === \"natural-situational-superko\") {\n        isKoViolation = hasDuplicatePosition((state) => {\n          return !state.pass && state.color === newState.color;\n        });\n      } else {\n        throw new Error(`Unimplemented ko rule ${this.koRule}`);\n      }\n    }\n\n    return isKoViolation;\n  },\n\n  _wouldBeSuicide: function(y, x, boardState) {\n    const color = boardState.nextColor();\n    const intersection = boardState.intersectionAt(y, x);\n    const surroundedEmptyPoint = intersection.isEmpty() && boardState.neighborsFor(intersection.y, intersection.x).filter(neighbor => neighbor.isEmpty()).length === 0;\n\n    if (!surroundedEmptyPoint) {\n      return false;\n    }\n\n    const someFriendlyNotInAtari = boardState.neighborsFor(intersection.y, intersection.x).some(neighbor => {\n      const inAtari = boardState.inAtari(neighbor.y, neighbor.x);\n      const friendly = neighbor.isOccupiedWith(color);\n\n      return friendly && !inAtari;\n    });\n\n    if (someFriendlyNotInAtari) {\n      return false;\n    }\n\n    const someEnemyInAtari = boardState.neighborsFor(intersection.y, intersection.x).some(neighbor => {\n      const inAtari = boardState.inAtari(neighbor.y, neighbor.x);\n      const enemy = !neighbor.isOccupiedWith(color);\n\n      return enemy && inAtari;\n    });\n\n    if (someEnemyInAtari) {\n      return false;\n    }\n\n    return true;\n  }\n};\n\nexport default Ruleset;\n"]}