{"version":3,"sources":["../src/scorer.js"],"names":[],"mappings":"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","file":"scorer.js","sourcesContent":["import utils from \"./utils\";\nimport Intersection from \"./intersection\";\nimport Region from \"./region\";\nimport EyePoint from \"./eye-point\";\n\nconst boardStateWithoutDeadPoints = function(game) {\n  return game.currentState()._withoutIntersectionsMatching(i => {\n    return game._isDeadAt(i.y, i.x);\n  });\n};\n\nconst boardStateWithoutNeutralPoints = function(boardState) {\n  const regions = Region.allFor(boardState);\n  const neutralRegions = regions.filter(r => r.isNeutral());\n\n  if (regions.length === 0 || neutralRegions.length === 0) {\n    return boardState;\n  }\n\n  const replacements = {};\n\n  neutralRegions.forEach(r => {\n    let startingX = null;\n    let startingY = null;\n\n    r.intersections.forEach(intersection => {\n      startingX = startingX || intersection.x;\n      startingX = startingX || intersection.y;\n\n      const manhattanDistance = Math.abs(intersection.y - startingY) + Math.abs(intersection.x - startingX);\n      const replacementColor = [\"black\", \"white\"][manhattanDistance % 2];\n      const replacement = new Intersection(intersection.y, intersection.x, replacementColor);\n\n      replacements[intersection.y] = replacements[intersection.y] || [];\n      replacements[intersection.y][intersection.x] = replacement;\n    });\n  });\n\n  const newPoints = boardState.intersections.map(i => {\n    if (replacements[i.y] && replacements[i.y][i.x]) {\n      return replacements[i.y][i.x];\n    } else {\n      return i;\n    }\n  });\n\n  return boardState._withNewPoints(newPoints);\n};\n\nconst boardStateWithClearFalseEyesFilled = function(boardState) {\n  const territoryRegions = Region.allFor(boardState).filter(r => r.isTerritory());\n  const falseEyePoints = utils.flatMap(territoryRegions, r => r.intersections).filter(i => (new EyePoint(boardState, i)).isFalse());\n\n  let pointsNeighboringAtari = falseEyePoints.filter(i => {\n    return boardState.neighborsFor(i.y, i.x).some(n => boardState.inAtari(n.y, n.x));\n  });\n  let neutralAtariUpdatedState = boardState;\n\n  while (pointsNeighboringAtari.length > 0) {\n    const newPoints = neutralAtariUpdatedState.intersections.map(i => {\n      if (pointsNeighboringAtari.indexOf(i) > -1) {\n        return new Intersection(i.y, i.x, (new EyePoint(neutralAtariUpdatedState, i)).filledColor());\n      } else {\n        return i;\n      }\n    });\n    neutralAtariUpdatedState = neutralAtariUpdatedState._withNewPoints(newPoints);\n\n    const boardState = boardStateWithoutNeutralPoints(neutralAtariUpdatedState);\n    const territoryRegions = Region.allFor(boardState).filter(r => r.isTerritory());\n    const falseEyePoints = utils.flatMap(territoryRegions, r => r.intersections).filter(i => (new EyePoint(boardState, i)).isFalse());\n\n    pointsNeighboringAtari = falseEyePoints.filter(i => {\n      return neutralAtariUpdatedState.neighborsFor(i.y, i.x).some(n => neutralAtariUpdatedState.inAtari(n.y, n.x));\n    });\n  }\n\n  return neutralAtariUpdatedState;\n};\n\nconst TerritoryScoring = Object.freeze({\n  score: function(game) {\n    const blackDeadAsCaptures = game.deadStones().filter(function(deadPoint) { return game.intersectionAt(deadPoint.y, deadPoint.x).isBlack(); });\n    const whiteDeadAsCaptures = game.deadStones().filter(function(deadPoint) { return game.intersectionAt(deadPoint.y, deadPoint.x).isWhite(); });\n\n    const territory = game.territory();\n    const boardState = game.currentState();\n\n    return {\n      black: territory.black.length + boardState.whiteStonesCaptured + whiteDeadAsCaptures.length,\n      white: territory.white.length + boardState.blackStonesCaptured + blackDeadAsCaptures.length\n    };\n  },\n\n  territory: function(game) {\n    const stateWithoutDeadPoints = boardStateWithoutDeadPoints(game);\n    const stateWithoutNeutrals = boardStateWithoutNeutralPoints(stateWithoutDeadPoints);\n    const stateWithClearFalseEyesFilled = boardStateWithClearFalseEyesFilled(stateWithoutNeutrals);\n\n    const territoryRegions = Region.allFor(stateWithClearFalseEyesFilled).filter(r => r.isTerritory());\n\n    const territoryRegionsWithoutSeki = territoryRegions.filter(r => {\n      const merged = Region.merge(territoryRegions, r);\n      const eyeCounts = merged.map(m => Math.ceil(m.numberOfEyes()));\n\n      return eyeCounts.length > 0 && eyeCounts.reduce((a, b) => a + b) >= 2;\n    });\n\n    const blackRegions = territoryRegionsWithoutSeki.filter(r => r.isBlack());\n    const whiteRegions = territoryRegionsWithoutSeki.filter(r => r.isWhite());\n\n    return {\n      black: utils.flatMap(blackRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x })),\n      white: utils.flatMap(whiteRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x }))\n    };\n  }\n});\n\nconst AreaScoring = Object.freeze({\n  score: function(game) {\n    const blackStonesOnTheBoard = game.intersections().filter(function(intersection) { return intersection.isBlack() && !game._isDeadAt(intersection.y, intersection.x); });\n    const whiteStonesOnTheBoard = game.intersections().filter(function(intersection) { return intersection.isWhite() && !game._isDeadAt(intersection.y, intersection.x); });\n    const territory = game.territory();\n\n    return {\n      black: territory.black.length + blackStonesOnTheBoard.length,\n      white: territory.white.length + whiteStonesOnTheBoard.length\n    };\n  },\n\n  territory: function(game) {\n    const regions = Region.allFor(boardStateWithoutDeadPoints(game));\n    const territoryRegions = regions.filter(r => r.isTerritory());\n    const blackRegions = territoryRegions.filter(r => r.isBlack());\n    const whiteRegions = territoryRegions.filter(r => r.isWhite());\n\n    return {\n      black: utils.flatMap(blackRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x })),\n      white: utils.flatMap(whiteRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x }))\n    };\n  }\n});\n\nconst Scorer = function({ scoreBy, komi } = {}) {\n  this._strategy = {\n    \"area\": AreaScoring,\n    \"territory\": TerritoryScoring,\n    \"equivalence\": AreaScoring\n  }[scoreBy];\n\n  this._komi = komi;\n\n  if (!this._strategy) {\n    throw new Error(\"Unknown scoring type: \" + scoreBy);\n  }\n\n  if (this._komi === null || typeof this._komi === \"undefined\") {\n    throw new Error(\"Error initializing scorer without a komi value\");\n  }\n\n  if (typeof this._komi !== \"number\") {\n    throw new Error(\"Komi value given is not a number: \" + komi);\n  }\n\n  this._usePassStones = scoreBy === \"equivalence\";\n\n  Object.freeze(this);\n};\n\n\nScorer.prototype = {\n  score: function(game) {\n    const result = this._strategy.score(game);\n    result.white += this._komi;\n\n    if (this._usePassStones) {\n      // Under equivalence scoring, 2 consecutive passes signals(!) the end of the\n      // game, but just prior to the end of the game, white must make one final\n      // pass move if the game didn't end on a white pass.\n      //\n      // However, instead of creating a 3rd consecutive pass in the board state,\n      // white's additional pass stone is handled by the scoring mechanism alone.\n      // The idea is that, under any game resumption, the additional white pass\n      // stone must not exist, so we shouldn't add it.\n      //\n      // NOTE: the final result should rely on this scoring function. Any calculations\n      // using raw board state pass stone numbers may be off by 1 in favor of black.\n      const needsFinalWhitePassStone = game.currentState().color !== \"white\";\n\n      return {\n        black: result.black + game.currentState().whitePassStones + (needsFinalWhitePassStone ? 1 : 0),\n        white: result.white + game.currentState().blackPassStones\n      };\n    } else {\n      return result;\n    }\n  },\n\n  territory: function(game) {\n    return this._strategy.territory(game);\n  },\n\n  usingPassStones: function() {\n    return this._usePassStones;\n  }\n};\n\nexport default Scorer;\n"]}