{"version":3,"sources":["../src/region.js"],"names":[],"mappings":"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","file":"region.js","sourcesContent":["import utils from \"./utils\";\n\nconst Region = function(boardState, intersections) {\n  this.boardState = boardState;\n  this.intersections = intersections;\n\n  this._computed = {};\n\n  Object.freeze(this);\n};\n\nRegion._startingAt = function(boardState, y, x) {\n  const startingPoint = boardState.intersectionAt(y, x);\n\n  const [includedPoints, boundaryPoints] = boardState.partitionTraverse(startingPoint, neighbor => {\n    return neighbor.sameColorAs(startingPoint);\n  });\n\n  return [includedPoints, boundaryPoints];\n};\n\nRegion.allFor = function(boardState) {\n  let checkedPoints = [];\n  const regions = [];\n\n  boardState.intersections.forEach(point => {\n    if (checkedPoints.indexOf(point) > -1) {\n      // do nothing\n    } else {\n      const [regionPoints, _] = boardState.partitionTraverse(point, neighbor => {\n        return neighbor.sameColorAs(point);\n      });\n\n      regions.push(new Region(boardState, regionPoints));\n      checkedPoints = checkedPoints.concat(regionPoints);\n    }\n  });\n\n  return regions;\n};\n\nRegion.merge = function(regions, region) {\n  let mergedRegions = [region];\n  let length = -1;\n\n  while (mergedRegions.length !== length) {\n    length = mergedRegions.length;\n\n    mergedRegions = regions.filter(r => {\n      return r.isEmpty() && r.isTerritory() && r.territoryColor() === region.territoryColor() && r.expandedBoundaryStones().some(stone => {\n        return mergedRegions.some(latestRegion => {\n          return latestRegion.expandedBoundaryStones().indexOf(stone) > -1;\n        });\n      });\n    });\n  }\n\n  return mergedRegions;\n};\n\nRegion.prototype = {\n  isEmpty: function() {\n    return this.intersections[0].isEmpty();\n  },\n\n  isTerritory: function() {\n    const point = this.intersections[0];\n\n    if (!point.isEmpty()) {\n      return false;\n    }\n\n    const [_, boundaryPoints] = Region._startingAt(this.boardState, point.y, point.x);\n    const surroundingColors = utils.unique(boundaryPoints.map(i => i.value));\n    const isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== \"empty\";\n\n    return isTerritory;\n  },\n\n  territoryColor: function() {\n    const point = this.intersections[0];\n    const [_, boundaryPoints] = Region._startingAt(this.boardState, point.y, point.x);\n    const surroundingColors = utils.unique(boundaryPoints.map(i => i.value));\n    const isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== \"empty\";\n\n    if (!point.isEmpty() || !isTerritory) {\n      throw new Error(\"Attempted to obtain territory color for something that isn't territory, region containing \" + point.y + \",\" + point.x);\n    } else {\n      return surroundingColors[0];\n    }\n  },\n\n  isBlack: function() {\n    return this.territoryColor() === \"black\";\n  },\n\n  isWhite: function() {\n    return this.territoryColor() === \"white\";\n  },\n\n  isNeutral: function() {\n    return !this.intersections[0].isBlack() && !this.intersections[0].isWhite() && !this.isTerritory();\n  },\n\n  exterior: function() {\n    return this.boardState.intersections.filter(i => {\n      return this.intersections.indexOf(i) < 0 && this.boardState.neighborsFor(i.y, i.x).some(neighbor => {\n        return this.intersections.indexOf(neighbor) > -1;\n      });\n    });\n  },\n\n  boundaryStones: function() {\n    if (this._computed.boundaryStones) {\n      return this._computed.boundaryStones;\n    }\n\n    if (!this.isEmpty()) {\n      throw new Error(\"Attempted to obtain boundary stones for non-empty region\");\n    }\n\n    this._computed.boundaryStones = this.exterior().filter(i => !i.sameColorAs(this.intersections[0]));\n\n    return this._computed.boundaryStones;\n  },\n\n  expandedBoundaryStones: function() {\n    if (this._computed.expandedBoundaryStones) {\n      return this._computed.expandedBoundaryStones;\n    }\n\n    const boundaryStones = this.boundaryStones();\n    const regions = Region.allFor(this.boardState).filter(r => r.intersections.some(i => boundaryStones.indexOf(i) > -1));\n\n    this._computed.expandedBoundaryStones = utils.flatMap(regions, r => r.intersections);\n\n    return this._computed.expandedBoundaryStones;\n  },\n\n  lengthOfTerritoryBoundary: function() {\n    // count the empty border points to treat the edge of the board itself as points\n    const borderPoints = this.intersections.filter(i => {\n      return i.y === 0 || i.y === this.boardState.boardSize - 1 || i.x === 0 || i.x === this.boardState.boardSize - 1;\n    });\n    const cornerPoints = this.intersections.filter(i => {\n      return i.y % this.boardState.boardSize - 1 === 0 && i.x % this.boardState.boardSize - 1 === 0;\n    });\n\n    return this.boundaryStones().length + borderPoints.length + cornerPoints.length;\n  },\n\n  containsSquareFour: function() {\n    return this.intersections.some(i => {\n      return [\n        [0, 0], [0, 1],\n        [1, 0], [1, 1]\n      ].every(([yOffset, xOffset]) => {\n        const y = i.y + yOffset;\n        const x = i.x + xOffset;\n\n        const onTheBoard = y >= 0 && y < this.boardState.boardSize && x >= 0 && x < this.boardState.boardSize;\n\n        return onTheBoard && this.boardState.intersectionAt(y, x).sameColorAs(i);\n      });\n    });\n  },\n\n  containsCurvedFour: function() {\n    return this.intersections.some(i => {\n      return [\n        [\n          [0, 0],\n          [1, 0],\n          [2, 0], [2, 1]\n        ],\n        [\n                         [-1, 2],\n          [0, 0], [0, 1], [0, 2]\n        ],\n        [\n          [0, 0], [0, 1],\n                  [1, 1],\n                  [2, 1]\n        ],\n        [\n          [-1, 0], [-1, 1], [-1, 2],\n          [0, 0]\n        ],\n        [\n                 [-2, 1],\n                 [-1, 1],\n          [0, 0], [0, 1]\n        ],\n        [\n          [0, 0],\n          [1, 0], [1, 1], [1, 2]\n        ],\n        [\n          [0, -1], [0, 0],\n          [1, -1],\n          [2, -1]\n        ],\n        [\n          [-1, -2], [-1, -1], [-1, 0],\n                              [0, 0]\n        ]\n      ].some(expectedPoints => {\n        return expectedPoints.every(([yOffset, xOffset]) => {\n          const y = i.y + yOffset;\n          const x = i.x + xOffset;\n\n          const onTheBoard = y >= 0 && y < this.boardState.boardSize && x >= 0 && x < this.boardState.boardSize;\n\n          return onTheBoard && this.boardState.intersectionAt(y, x).sameColorAs(i);\n        });\n      });\n    });\n  },\n\n  numberOfEyes: function() {\n    if (!this.intersections[0].isEmpty()) {\n      throw new Error(\"Unexpected calculation of number of eyes for a non-empty region containing \" + this.intersections[0].y + \",\" + this.intersections[0].x);\n    }\n\n    const boundaryLength = this.lengthOfTerritoryBoundary();\n\n    if (boundaryLength < 2) {\n      throw new Error(\"Unexpected boundary length of \" + boundaryLength + \" for region including \" + this.intersections[0].y + \",\" + this.intersections[0].x);\n    }\n\n    if (boundaryLength >= 10) {\n      return 2;\n    }\n\n    let eyes;\n\n    switch (boundaryLength) {\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n        eyes = 1;\n        break;\n      case 7:\n        eyes = 1.5;\n        break;\n      case 8:\n        if (this.containsSquareFour()) {\n          eyes = 1;\n        } else if (this.containsCurvedFour()) {\n          eyes = 2;\n        } else {\n          eyes = 1.5;\n        }\n\n        break;\n      case 9:\n        if (this.containsSquareFour()) {\n          eyes = 1.5;\n        } else {\n          eyes = 2;\n        }\n        break;\n\n      default:\n        throw new Error(\"unhandled boundary length \" + boundaryLength);\n    }\n\n    return eyes;\n  }\n};\n\nexport default Region;\n"]}