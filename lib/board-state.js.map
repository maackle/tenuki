{"version":3,"sources":["../src/board-state.js"],"names":[],"mappings":"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","file":"board-state.js","sourcesContent":["import utils from \"./utils\";\nimport Intersection from \"./intersection\";\nimport Zobrist from \"./zobrist\";\n\nconst BoardState = function({ moveNumber, playedPoint, color, pass, blackPassStones, whitePassStones, intersections, blackStonesCaptured, whiteStonesCaptured, capturedPositions, koPoint, boardSize }) {\n  this.moveNumber = moveNumber;\n  this.playedPoint = playedPoint;\n  this.color = color;\n  this.pass = pass;\n  this.blackPassStones = blackPassStones;\n  this.whitePassStones = whitePassStones;\n  this.intersections = intersections;\n  this.blackStonesCaptured = blackStonesCaptured;\n  this.whiteStonesCaptured = whiteStonesCaptured;\n  this.capturedPositions = capturedPositions;\n  this.koPoint = koPoint;\n  this.boardSize = boardSize;\n  this._positionHash = Zobrist.hash(boardSize, intersections);\n\n  Object.freeze(this);\n};\n\nBoardState.prototype = {\n  copyWithAttributes: function(attrs) {\n    const retrieveProperties = ({ moveNumber, playedPoint, color, pass, blackPassStones, whitePassStones, intersections, blackStonesCaptured, whiteStonesCaptured, capturedPositions, koPoint, boardSize }) => ({ moveNumber, playedPoint, color, pass, blackPassStones, whitePassStones, intersections, blackStonesCaptured, whiteStonesCaptured, capturedPositions, koPoint, boardSize });\n    const existingAttrs = retrieveProperties(this);\n    const newAttrs = retrieveProperties(Object.assign(existingAttrs, attrs));\n\n    return new BoardState(newAttrs);\n  },\n\n  _capturesFrom: function(y, x, color) {\n    const capturedNeighbors = this.neighborsFor(y, x).filter(neighbor => {\n      // TODO: this value of 1 is potentially weird.\n      // we're checking against the move before the stone we just played\n      // where this space is not occupied yet. things should possibly be\n      // reworked.\n      return !neighbor.isEmpty() && neighbor.value !== color && this.libertiesAt(neighbor.y, neighbor.x) === 1;\n    });\n\n    const capturedStones = utils.flatMap(capturedNeighbors, neighbor => this.groupAt(neighbor.y, neighbor.x));\n\n    return utils.unique(capturedStones);\n  },\n\n  _updateIntersection: function(intersection, intersections, color) {\n    return intersections.map(i => {\n      if (i.y === intersection.y && i.x === intersection.x) {\n        return new Intersection(i.y, i.x, color);\n      } else {\n        return i;\n      }\n    });\n  },\n\n  _removeIntersection: function(intersection, intersections) {\n    return this._updateIntersection(intersection, intersections, \"empty\");\n  },\n\n  _withoutIntersectionsMatching: function(condition) {\n    const newPoints = this.intersections.map(i => {\n      if (condition(i)) {\n        return new Intersection(i.y, i.x, \"empty\");\n      } else {\n        return i;\n      }\n    });\n\n    return this._withNewPoints(newPoints);\n  },\n\n  _withNewPoints: function(newPoints) {\n    return this.copyWithAttributes({ intersections: newPoints });\n  },\n\n  nextColor: function() {\n    if (this.color === \"black\") {\n      return \"white\";\n    } else {\n      return \"black\";\n    }\n  },\n\n  yCoordinateFor: function(y) {\n    return this.boardSize - y;\n  },\n\n  xCoordinateFor: function(x) {\n    const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"];\n\n    return letters[x];\n  },\n\n  playPass: function(color) {\n    const stateInfo = {\n      moveNumber: this.moveNumber + 1,\n      playedPoint: null,\n      color: color,\n      pass: true,\n      blackPassStones: this.blackPassStones,\n      whitePassStones: this.whitePassStones,\n      intersections: this.intersections,\n      blackStonesCaptured: this.blackStonesCaptured,\n      whiteStonesCaptured: this.whiteStonesCaptured,\n      capturedPositions: [],\n      koPoint: null,\n      boardSize: this.boardSize\n    };\n\n    stateInfo[color + \"PassStones\"] += 1;\n\n    const newState = new BoardState(stateInfo);\n\n    return newState;\n  },\n\n  _simpleKoPoint: function() {\n    let simpleKoPoint = null;\n\n    if (this.playedPoint) {\n      const { y, x } = this.playedPoint;\n\n      if (this.capturedPositions.length === 1 && this.groupAt(y, x).length === 1 && this.inAtari(y, x)) {\n        simpleKoPoint = this.capturedPositions[0];\n      }\n    }\n\n    return simpleKoPoint;\n  },\n\n  playAt: function(y, x, playedColor) {\n    const capturedPositions = this._capturesFrom(y, x, playedColor);\n    let playedPoint = this.intersectionAt(y, x);\n    let newPoints = this.intersections;\n\n    capturedPositions.forEach(i => {\n      newPoints = this._removeIntersection(i, newPoints);\n    });\n\n    newPoints = this._updateIntersection(playedPoint, newPoints, playedColor);\n\n    const newTotalBlackCaptured = this.blackStonesCaptured + (playedColor === \"black\" ? 0 : capturedPositions.length);\n    const newTotalWhiteCaptured = this.whiteStonesCaptured + (playedColor === \"white\" ? 0 : capturedPositions.length);\n\n    const boardSize = this.boardSize;\n\n    const moveInfo = {\n      moveNumber: this.moveNumber + 1,\n      playedPoint: Object.freeze({ y, x }),\n      color: playedColor,\n      pass: false,\n      blackPassStones: this.blackPassStones,\n      whitePassStones: this.whitePassStones,\n      intersections: newPoints,\n      blackStonesCaptured: newTotalBlackCaptured,\n      whiteStonesCaptured: newTotalWhiteCaptured,\n      capturedPositions: capturedPositions,\n      boardSize: boardSize\n    };\n\n    const withPlayedPoint = new BoardState(moveInfo);\n\n    const possibleKoPoint = withPlayedPoint._simpleKoPoint();\n\n    if (possibleKoPoint) {\n      moveInfo[\"koPoint\"] = { y: possibleKoPoint.y, x: possibleKoPoint.x };\n    } else {\n      moveInfo[\"koPoint\"] = null;\n    }\n\n    return new BoardState(moveInfo);\n  },\n\n  intersectionAt: function(y, x) {\n    if (y >= this.boardSize || x >= this.boardSize) {\n      throw new Error(`Intersection at (${y}, ${x}) would be outside the board`);\n    }\n\n    if (y < 0 || x < 0) {\n      throw new Error(`Intersection position cannot be negative, but was given (${y}, ${x})`);\n    }\n\n    return this.intersections[y*this.boardSize + x];\n  },\n\n  groupAt: function(y, x) {\n    const startingPoint = this.intersectionAt(y, x);\n\n    const [group, _] = this.partitionTraverse(startingPoint, neighbor => {\n      return neighbor.sameColorAs(startingPoint);\n    });\n\n    return group;\n  },\n\n  libertiesAt: function(y, x) {\n    const point = this.intersectionAt(y, x);\n\n    const emptyPoints = utils.flatMap(this.groupAt(point.y, point.x), groupPoint => {\n      return this.neighborsFor(groupPoint.y, groupPoint.x).filter(intersection => intersection.isEmpty());\n    });\n\n    return utils.unique(emptyPoints).length;\n  },\n\n  inAtari: function(y, x) {\n    return this.libertiesAt(y, x) === 1;\n  },\n\n  neighborsFor: function(y, x) {\n    const neighbors = [];\n\n    if (x > 0) {\n      neighbors.push(this.intersectionAt(y, x - 1));\n    }\n\n    if (x < (this.boardSize - 1)) {\n      neighbors.push(this.intersectionAt(y, x + 1));\n    }\n\n    if (y > 0) {\n      neighbors.push(this.intersectionAt(y - 1, x));\n    }\n\n    if (y < (this.boardSize - 1)) {\n      neighbors.push(this.intersectionAt(y + 1, x));\n    }\n\n    return neighbors;\n  },\n\n  positionSameAs: function(otherState) {\n    return this._positionHash === otherState._positionHash && this.intersections.every(point => {\n      return point.sameColorAs(otherState.intersectionAt(point.y, point.x));\n    });\n  },\n\n  // Iterative depth-first search traversal. Start from\n  // startingPoint, iteratively follow all neighbors.\n  // If inclusionConditionis met for a neighbor, include it\n  // otherwise, exclude it. At the end, return two arrays:\n  // One for the included neighbors, another for the remaining neighbors.\n  partitionTraverse: function(startingPoint, inclusionCondition) {\n    let checkedPoints = [];\n    let boundaryPoints = [];\n    let pointsToCheck = [];\n\n    pointsToCheck.push(startingPoint);\n\n    while (pointsToCheck.length > 0) {\n      const point = pointsToCheck.pop();\n\n      if (checkedPoints.indexOf(point) > -1) {\n        // skip it, we already checked\n      } else {\n        checkedPoints.push(point);\n\n        this.neighborsFor(point.y, point.x).forEach(neighbor => {\n          if (checkedPoints.indexOf(neighbor) > -1) {\n            // skip this neighbor, we already checked it\n          } else {\n            if (inclusionCondition(neighbor)) {\n              pointsToCheck.push(neighbor);\n            } else {\n              boundaryPoints.push(neighbor);\n            }\n          }\n        });\n      }\n    }\n\n    return [checkedPoints, utils.unique(boundaryPoints)];\n  }\n};\n\nBoardState._initialFor = function(boardSize, handicapStones) {\n  this._cache = this._cache || {};\n  this._cache[boardSize] = this._cache[boardSize] || {};\n\n  if (this._cache[boardSize][handicapStones]) {\n    return this._cache[boardSize][handicapStones];\n  }\n\n  let emptyPoints = Array.apply(null, Array(boardSize * boardSize));\n  emptyPoints = emptyPoints.map((x, i) => {\n    return new Intersection(Math.floor(i / boardSize), i % boardSize);\n  });\n\n  const hoshiOffset = boardSize > 11 ? 3 : 2;\n  const hoshiPoints = {\n    topRight:     { y: hoshiOffset,                 x: boardSize - hoshiOffset - 1 },\n    bottomLeft:   { y: boardSize - hoshiOffset - 1, x: hoshiOffset },\n    bottomRight:  { y: boardSize - hoshiOffset - 1, x: boardSize - hoshiOffset - 1 },\n    topLeft:      { y: hoshiOffset,                 x: hoshiOffset },\n    middle:       { y: (boardSize + 1)/2 - 1,       x: (boardSize + 1)/2 - 1 },\n    middleLeft:   { y: (boardSize + 1)/2 - 1,       x: hoshiOffset },\n    middleRight:  { y: (boardSize + 1)/2 - 1,       x: boardSize - hoshiOffset - 1 },\n    middleTop:    { y: hoshiOffset,                 x: (boardSize + 1)/2 - 1 },\n    middleBottom: { y: boardSize - hoshiOffset - 1, x: (boardSize + 1)/2 - 1 }\n  };\n  const handicapPlacements = {\n    0: [],\n    1: [],\n    2: [hoshiPoints.topRight, hoshiPoints.bottomLeft],\n    3: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight],\n    4: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft],\n    5: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middle],\n    6: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight],\n    7: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middle],\n    8: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middleTop, hoshiPoints.middleBottom],\n    9: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middleTop, hoshiPoints.middleBottom, hoshiPoints.middle]\n  };\n\n  handicapPlacements[handicapStones].forEach(p => {\n    emptyPoints[p.y*boardSize + p.x] = new Intersection(p.y, p.x, \"black\");\n  });\n\n  const initialState = new BoardState({\n    color: handicapStones > 1 ? \"black\" : \"white\",\n    moveNumber: 0,\n    intersections: Object.freeze(emptyPoints),\n    blackStonesCaptured: 0,\n    whiteStonesCaptured: 0,\n    whitePassStones: 0,\n    blackPassStones: 0,\n    boardSize: boardSize\n  });\n\n  this._cache[boardSize][handicapStones] = initialState;\n  return initialState;\n};\n\nexport default BoardState;\n"]}