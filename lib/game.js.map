{"version":3,"sources":["../src/game.js"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["import DOMRenderer from \"./dom-renderer\";\nimport SVGRenderer from \"./svg-renderer\";\nimport NullRenderer from \"./null-renderer\";\nimport BoardState from \"./board-state\";\nimport Ruleset from \"./ruleset\";\nimport Scorer from \"./scorer\";\n\nconst VALID_GAME_OPTIONS = [\n  \"element\",\n  \"boardSize\",\n  \"scoring\",\n  \"handicapStones\",\n  \"koRule\",\n  \"komi\",\n  \"_hooks\",\n  \"fuzzyStonePlacement\",\n  \"renderer\",\n  \"freeHandicapPlacement\",\n];\n\nconst Game = function(options = {}) {\n  this._validateOptions(options);\n\n  this._defaultBoardSize = 19;\n  this.boardSize = null;\n  this._moves = [];\n  this.callbacks = {\n    postRender: function() {},\n    postMove: function() {},\n  };\n  this._boardElement = options[\"element\"];\n  this._defaultScoring = \"territory\";\n  this._defaultKoRule = \"simple\";\n  this._defaultRenderer = \"svg\";\n  this._deadPoints = [];\n\n  this._setup(options);\n};\n\nGame.prototype = {\n  _validateOptions: function(options) {\n    for (let key in options) {\n      if (options.hasOwnProperty(key)) {\n        if (VALID_GAME_OPTIONS.indexOf(key) < 0) {\n          throw new Error(\"Unrecognized game option: \" + key);\n        }\n\n        if (typeof options[key] === \"undefined\" || options[key] === null) {\n          throw new Error(`Game option ${key} must not be set as null or undefined`);\n        }\n      }\n    }\n  },\n\n  _configureOptions: function({ boardSize = this._defaultBoardSize, komi = 0, handicapStones = 0, freeHandicapPlacement = false, scoring = this._defaultScoring, koRule = this._defaultKoRule, renderer = this._defaultRenderer } = {}) {\n    if (typeof boardSize !== \"number\") {\n      throw new Error(\"Board size must be a number, but was: \" + typeof boardSize);\n    }\n\n    if (typeof handicapStones !== \"number\") {\n      throw new Error(\"Handicap stones must be a number, but was: \" + typeof boardSize);\n    }\n\n    if (handicapStones > 0 && boardSize !== 9 && boardSize !== 13 && boardSize !== 19) {\n      throw new Error(\"Handicap stones not supported on sizes other than 9x9, 13x13 and 19x19\");\n    }\n\n    if (handicapStones < 0 || handicapStones === 1 || handicapStones > 9) {\n      throw new Error(\"Only 2 to 9 handicap stones are supported\");\n    }\n\n    if (boardSize > 19) {\n      throw new Error(\"cannot generate a board size greater than 19\");\n    }\n\n    this.boardSize = boardSize;\n    this.handicapStones = handicapStones;\n    this._freeHandicapPlacement = freeHandicapPlacement;\n\n    this._scorer = new Scorer({\n      scoreBy: scoring,\n      komi: komi\n    });\n\n    this._rendererChoice = {\n      \"dom\": DOMRenderer,\n      \"svg\": SVGRenderer\n    }[renderer];\n\n    if (!this._rendererChoice) {\n      throw new Error(\"Unknown renderer: \" + renderer);\n    }\n\n    this._ruleset = new Ruleset({\n      koRule: koRule\n    });\n\n    if (this._freeHandicapPlacement) {\n      this._initialState = BoardState._initialFor(boardSize, 0);\n    } else {\n      this._initialState = BoardState._initialFor(boardSize, handicapStones);\n    }\n  },\n\n  _stillPlayingHandicapStones: function() {\n    return this._freeHandicapPlacement && this.handicapStones > 0 && this._moves.length < this.handicapStones;\n  },\n\n  _setup: function(options = {}) {\n    this._validateOptions(options);\n    this._configureOptions(options);\n\n    if (this._boardElement) {\n      const defaultRendererHooks = {\n        handleClick: (y, x) => {\n          if (this.isOver()) {\n            this.toggleDeadAt(y, x);\n          } else {\n            const ok = this.playAt(y, x);\n            if (ok) this.callbacks.postMove({x, y});\n          }\n        },\n\n        hoverValue: (y, x) => {\n          if (!this.isOver() && !this.isIllegalAt(y, x)) {\n            return this.currentPlayer();\n          }\n        },\n\n        gameIsOver: () => {\n          return this.isOver();\n        }\n      };\n\n      this.renderer = new this._rendererChoice(this._boardElement, {\n        hooks: options[\"_hooks\"] || defaultRendererHooks,\n        options: {\n          fuzzyStonePlacement: options[\"fuzzyStonePlacement\"]\n        }\n      });\n    } else {\n      this.renderer = new NullRenderer();\n    }\n\n    this.render();\n  },\n\n  intersectionAt: function(y, x) {\n    return this.currentState().intersectionAt(y, x);\n  },\n\n  intersections: function() {\n    return this.currentState().intersections;\n  },\n\n  deadStones: function() {\n    return this._deadPoints;\n  },\n\n  coordinatesFor: function(y, x) {\n    return this.currentState().xCoordinateFor(x) + this.currentState().yCoordinateFor(y);\n  },\n\n  currentPlayer: function() {\n    if (this._stillPlayingHandicapStones()) {\n      return \"black\";\n    }\n\n    return this.currentState().nextColor();\n  },\n\n  isWhitePlaying: function() {\n    return this.currentPlayer() === \"white\";\n  },\n\n  isBlackPlaying: function() {\n    return this.currentPlayer() === \"black\";\n  },\n\n  score: function() {\n    return this._scorer.score(this);\n  },\n\n  currentState: function() {\n    return this._moves[this._moves.length - 1] || this._initialState;\n  },\n\n  moveNumber: function() {\n    return this.currentState().moveNumber;\n  },\n\n  playAt: function(y, x, { render = true } = {}) {\n    if (this.isIllegalAt(y, x)) {\n      return false;\n    }\n\n    let newState = this.currentState().playAt(y, x, this.currentPlayer());\n    const { koPoint } = newState;\n\n    if (koPoint && !this._ruleset._isKoViolation(koPoint.y, koPoint.x, newState, this._moves.concat(newState))) {\n      newState = newState.copyWithAttributes({ koPoint: null });\n    }\n\n    this._moves.push(newState);\n\n    if (render) {\n      this.render();\n    }\n\n    return true;\n  },\n\n  pass: function({ render = true } = {}) {\n    if (this.isOver()) {\n      return false;\n    }\n\n    const newState = this.currentState().playPass(this.currentPlayer());\n    this._moves.push(newState);\n\n    if (render) {\n      this.render();\n    }\n\n    return true;\n  },\n\n  isOver: function() {\n    if (this._moves.length < 2) {\n      return false;\n    }\n\n    const finalMove = this._moves[this._moves.length - 1];\n    const previousMove = this._moves[this._moves.length - 2];\n\n    return finalMove.pass && previousMove.pass;\n  },\n\n  markDeadAt: function(y, x, { render = true } = {}) {\n    if (this._isDeadAt(y, x)) {\n      return true;\n    }\n\n    return this._setDeadStatus(y, x, true, { render });\n  },\n\n  unmarkDeadAt: function(y, x, { render = true } = {}) {\n    if (!this._isDeadAt(y, x)) {\n      return true;\n    }\n\n    return this._setDeadStatus(y, x, false, { render });\n  },\n\n  toggleDeadAt: function(y, x, { render = true } = {}) {\n    return this._setDeadStatus(y, x, !this._isDeadAt(y, x), { render });\n  },\n\n  _setDeadStatus: function(y, x, markingDead, { render = true } = {}) {\n    const selectedIntersection = this.intersectionAt(y, x);\n\n    if (selectedIntersection.isEmpty()) {\n      return;\n    }\n\n    const chosenDead = [];\n\n    const [candidates] = this.currentState().partitionTraverse(selectedIntersection, intersection => {\n      return intersection.isEmpty() || intersection.sameColorAs(selectedIntersection);\n    });\n\n    candidates.forEach(sameColorOrEmpty => {\n      if (!sameColorOrEmpty.isEmpty()) {\n        chosenDead.push(sameColorOrEmpty);\n      }\n    });\n\n    chosenDead.forEach(intersection => {\n      if (markingDead) {\n        this._deadPoints.push({ y: intersection.y, x: intersection.x });\n      } else {\n        this._deadPoints = this._deadPoints.filter(dead => !(dead.y === intersection.y && dead.x === intersection.x));\n      }\n    });\n\n    if (render) {\n      this.render();\n    }\n\n    return true;\n  },\n\n  _isDeadAt: function(y, x) {\n    return this._deadPoints.some(dead => dead.y === y && dead.x === x);\n  },\n\n  isIllegalAt: function(y, x) {\n    return this._ruleset.isIllegal(y, x, this);\n  },\n\n  territory: function() {\n    if (!this.isOver()) {\n      return {\n        black: [],\n        white: []\n      };\n    }\n\n    return this._scorer.territory(this);\n  },\n\n  undo: function() {\n    this._moves.pop();\n    this.render();\n  },\n\n  render: function() {\n    if (!this.isOver()) {\n      this._deadPoints = [];\n    }\n\n    this.renderer.render(this.currentState(), {\n      territory: this.territory(),\n      deadStones: this.deadStones()\n    });\n\n    this.callbacks.postRender(this);\n  }\n};\n\nexport default Game;\n"]}